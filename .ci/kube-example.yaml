# See https://aka.ms/yaml
# This pipeline to be run on PR and merge into "main" ?
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=example%2Cparameter-schema#triggers
trigger: 
  batch: true
  branches:
    include:
      - topic/*
      - master
    exclude:
      - features/experimental/*
  paths:
    exclude:
      - README.md

# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=example%2Cparameter-schema#resources
resources: 
# - repo: self
  containers:
    - container: ubuntu
      image: rdmz-harbor.rdmz.labs.mlnx/swx-storage/spdk/x86_64/ubuntu2004ofed54:5.4-1.0.3.0

variables:
  dockerRegistryServiceConnection: 'swx-rdmz-cstor01-vip' # Docker service connection identifier
  vmImageName: 'ubuntu-latest' # name of your VM
  envName: 'myEnv' # name of your environment
  resourceName: 'scratch' # name of the resource you are referencing (namespace+SA in K8s instance)
  dockerfilePath: '**/Dockerfile'
  # tag: '$(Build.BuildId)' # tag added for your build
  tag: 'latest' # tag added for your build
  k8sNamespaceForPR: 'scratch-pr' # namespace used in your PR
  imagePullSecret: '' # image pull secret
  imageRepository: 'demo/alpine' # name of image repository
  containerRegistry: 'swx-rdmz-cstor01-vip.rdmz.labs.mlnx:18181' # path to container registry
  k8sServiceConnection: 'RDMZ'


# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema#pool
pool:
  #  vmImage: $(vmImageName)
  name: MLNX
  demands:
  - harbor_registry -equals yes

stages:
- stage: Build
  jobs:
    - job: build_a_code
      displayName: Build a code in "ubuntu"
      pool:
        name: MLNX
        demands:
        - ucx_instinct -equals yes
      container: ubuntu
      steps:
        - checkout: self
          clean: true
          fetchDepth: 100

        - bash: autoreconf -v --install
          displayName: Setup autotools
        - bash: make
          displayName: build the thing

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
#      name: MLNX
#      demands:
#        - harbor_registry -equals yes
    environment: $(envName).$(resourceName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              # kubernetesServiceConnection: $(k8sServiceConnection)
              # ^^^ value for kubernetesServiceConnection input automatically 
              #     passed down to task by environment.resource input
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              kubernetesServiceConnection: $(k8sServiceConnection)
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

  - deployment: DeployPullRequest
    displayName: Deploy Pull request
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
    pool:
       vmImage: $(vmImageName)
#      name: MLNX
#      demands:
#        - harbor_registry -equals yes
    environment: '$(envName).$(k8sNamespaceForPR)'
    strategy:
      runOnce:
        deploy:
          steps:
#          - reviewApp: $(resourceName)

          - task: Kubernetes@1
            displayName: 'Create a new namespace for the pull request'
            inputs:
              command: apply
              kubernetesServiceConnection: $(k8sServiceConnection)
              useConfigurationFile: true
              inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(k8sNamespaceForPR)" }}'

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              # kubernetesServiceConnection: $(k8sServiceConnection)
              secretName: $(imagePullSecret)
              namespace: $(k8sNamespaceForPR)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
          
          - task: KubernetesManifest@0
            displayName: Deploy to the new namespace in the Kubernetes cluster
            inputs:
              action: deploy
              # kubernetesServiceConnection: $(k8sServiceConnection)
              namespace: $(k8sNamespaceForPR)
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
